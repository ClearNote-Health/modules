nextflow_process {

    name "Test Process STAR_ALIGN"
    script "../main.nf"
    process "STAR_ALIGN"
    tag "modules"
    tag "modules_nfcore"
    tag "star"
    tag "star/align"
    tag "star/genomegenerate"

    setup {
        run("STAR_GENOMEGENERATE") {
            script "../../../star/genomegenerate/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test_fasta' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test_fai' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true) ]
                ])
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                """
            }
        }
    }

    test("homo_sapiens - single_end") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log_final[0][1]).name,
                    file(process.out.log_out[0][1]).name,
                    file(process.out.bam[0][1]).name,
                    file(process.out.bam_sorted[0][1]).name,
                    process.out.bam_transcript,
                    process.out.bam_unsorted,
                    process.out.bedgraph,
                    process.out.fastq,
                    process.out.junction,
                    process.out.log_progress,
                    process.out.read_per_gene_tab,
                    process.out.sam,
                    process.out.spl_junc_tab,
                    process.out.tab,
                    process.out.wig,
                    process.out.versions
                ).match("single_end")}
            )
        }
    }

    test("homo_sapiens - paired_end") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log_final[0][1]).name,
                    file(process.out.log_out[0][1]).name,
                    file(process.out.bam[0][1]).name,
                    file(process.out.bam_sorted[0][1]).name,
                    process.out.bam_transcript,
                    process.out.bam_unsorted,
                    process.out.bedgraph,
                    process.out.fastq,
                    process.out.junction,
                    process.out.log_progress,
                    process.out.read_per_gene_tab,
                    process.out.sam,
                    process.out.spl_junc_tab,
                    process.out.tab,
                    process.out.wig,
                    process.out.versions
                ).match("paired_end")}
            )
        }
    }

    test("homo_sapiens - paired_end - arriba") {
        config "./nextflow.arriba.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log_final[0][1]).name,
                    file(process.out.log_out[0][1]).name,
                    file(process.out.bam[0][1]).name,
                    process.out.bam_sorted,
                    process.out.bam_transcript,
                    process.out.bam_unsorted,
                    process.out.bedgraph,
                    process.out.fastq,
                    process.out.junction,
                    process.out.log_progress,
                    process.out.read_per_gene_tab,
                    process.out.sam,
                    process.out.spl_junc_tab,
                    process.out.tab,
                    process.out.wig,
                    process.out.versions
                ).match("arriba")}
            )
        }
    }

    test("homo_sapiens - paired_end - starfusion") {
        config "./nextflow.starfusion.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log_final[0][1]).name,
                    file(process.out.log_out[0][1]).name,
                    file(process.out.bam[0][1]).name,
                    process.out.bam_sorted,
                    process.out.bam_transcript,
                    process.out.bam_unsorted,
                    process.out.bedgraph,
                    process.out.fastq,
                    file(process.out.junction[0][1]).name,
                    process.out.log_progress,
                    process.out.read_per_gene_tab,
                    process.out.sam,
                    process.out.spl_junc_tab,
                    process.out.tab,
                    process.out.wig,
                    process.out.versions
                ).match("starfusion")}
            )
        }
    }

    test("homo_sapiens - paired_end - multiple") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log_final[0][1]).name,
                    file(process.out.log_out[0][1]).name,
                    file(process.out.bam[0][1]).name,
                    process.out.bam_sorted,
                    process.out.bam_transcript,
                    process.out.bam_unsorted,
                    process.out.bedgraph,
                    process.out.fastq,
                    process.out.junction,
                    process.out.log_progress,
                    process.out.read_per_gene_tab,
                    process.out.sam,
                    process.out.spl_junc_tab,
                    process.out.tab,
                    process.out.wig,
                    process.out.versions
                ).match("multiple")}
            )
        }
    }

    test("homo_sapiens - single_end - stub") {
        config "./nextflow.config"
        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("stub") }
            )
        }
    }
}