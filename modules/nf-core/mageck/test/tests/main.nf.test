nextflow_process {

    name "Test Process MAGECK_TEST"
    script "../main.nf"
    process "MAGECK_TEST"

    tag "modules"
    tag "modules_nfcore"
    tag "mageck"
    tag "mageck/test"

    test("mageck-test - csv") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/mus_musculus/mageck/count_table.csv', checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert file(process.out.gene_summary[0][1]).readLines().first().contains("pos|p-value") },
                { assert snapshot(process.out.version).match("version") }
            )
        }

    }

    test("mageck-test-day0 - csv") {

        config "./nextflow-day0_label.config"

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/mus_musculus/mageck/count_table.csv', checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert file(process.out.gene_summary[0][1]).readLines().first().contains("pos|p-value") },
                { assert snapshot(process.out.version).match("day0_version") }
            )
        }

    }

    test("mageck-test - csv - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/mus_musculus/mageck/count_table.csv', checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
