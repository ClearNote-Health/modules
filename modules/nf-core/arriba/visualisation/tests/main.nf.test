// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test arriba/visualisation
nextflow_process {

    name "Test Process ARRIBA_VISUALISATION"
    script "../main.nf"
    process "ARRIBA_VISUALISATION"

    tag "modules"
    tag "modules_nfcore"
    tag "arriba"
    tag "arriba/visualisation"

    test("homo_sapiens - fastq") {

        setup{
            run(STAR_GENOMEGENERATE) {
            script "../../../star/genomegenerate/main.nf"
            process {
            """
            fasta = [
                [ id:'test_fasta' ], // meta map
                [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
            fai = [
                [ id:'test_gtf' ], // meta map
                [ file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true) ]
            gtf = [
                [ id:'test_fasta_fai' ], // meta map
                [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
            """
            }
            }

            run(STAR_ALIGN) {
            script "../../../star/align/main.nf"
            process {
            """
            input = [ [ id:'test', single_end:false ], // meta map
                [   file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_2_fastq_gz'], checkIfExists: true) ]
            star_ignore_sjdbgtf = false
            seq_platform = 'illumina'
            seq_center = false
            STAR_GENOMEGENERATE.out.index
            gtf = [
                [ id:'test_fasta_fai' ], // meta map
                [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
            """
            }
            }
            run(ARRIBA_ARRIBA) {
            script "../../../arriba/arriba/main.nf"
            process {
            """
            STAR_ALIGN.out.bam
            fasta
            gtf
            """
            }
            }
            run(ARRIBA_DOWNLOAD) {
            script "../../../arriba/download/main.nf"
            process {
            """
            """
            }
            }

        }

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                STAR_GENOMEGENERATE ( fasta, gtf )
                STAR_ALIGN ( input, STAR_GENOMEGENERATE.out.index, gtf, star_ignore_sjdbgtf, seq_platform, seq_center )
                ARRIBA_ARRIBA ( STAR_ALIGN.out.bam, fasta, gtf, [[],[]], [[],[]], [[],[]], [[],[]], [[],[]])
                ARRIBA_DOWNLOAD ()
                ARRIBA_VISUALISATION ( STAR_ALIGN.out.bam, ARRIBA_ARRIBE.out.test.fusions.tsv, gtf, ARRIBA_DOWNLOAD.out.protein_domains_hg19_hs37d5_GRCh37_v2.4.0.gff3, ARRIBA_DOWNLOAD.out.cytobands_hg19_hs37d5_GRCh37_v2.4.0.tsv )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
                // See https://nf-co.re/docs/contributing/tutorials/nf-test_assertions for more information and examples.
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }

    }

}
