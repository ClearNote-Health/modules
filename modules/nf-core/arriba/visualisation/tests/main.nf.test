// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test arriba/visualisation
nextflow_process {

    name "Test Process ARRIBA_VISUALISATION"
    script "../main.nf"
    process "ARRIBA_VISUALISATION"

    tag "modules"
    tag "modules_nfcore"
    tag "arriba"
    tag "arriba/visualisation"


    setup{
        run("STAR_GENOMEGENERATE") {
        script "../../../star/genomegenerate/main.nf"
        process {
        """
        input[0]= [
            [ id:'test_fasta' ], // meta map
            [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]]
        input[1] = [
            [ id:'test_fasta_fai' ], // meta map
            [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]]
        """
        }
        }
        run("STAR_ALIGN") {
        script "../../../star/align/main.nf"
        process {
        """
        input[0] = [ [ id:'test', single_end:false ], // meta map
            [   file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true),
                file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_2_fastq_gz'], checkIfExists: true) ] ]
        input[1] = STAR_GENOMEGENERATE.out.index
        input[2] = [
            [ id:'test_fasta_fai' ], // meta map
            [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]]
        input[3] = false
        input[4] =  'illumina'
        input[5] =  false
        """
        }
        }
        run("SAMTOOLS_INDEX") {
        script "../../../samtools/index/main.nf"
        process {
        """
        input[0] = STAR_ALIGN.out.bam
        STAR_GENOMEGENERATE.out.index
        """
        }
        }
        run("ARRIBA_DOWNLOAD") {
        script "../../../arriba/download/main.nf"
        process {
        """
        """
        }
        }
        run("ARRIBA_ARRIBA") {
        script "../../../arriba/arriba/main.nf"
        process {
        """
        input[0] = STAR_ALIGN.out.bam
        input[1] = [
            [ id:'test_fasta' ], // meta map
            [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]]
        input[2] = [
            [ id:'test_fasta_fai' ], // meta map
            [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]]
        input[3] = []
        input[4] = []
        input[5] = []
        input[6] = []
        input[7] = []
        """
        }
        }
    }

    test("homo_sapiens - fastq") {

        when {
            process {
                """
                input[0] = [STAR_GENOMEGENERATE.out.bam.join(SAMTOOLS_INDEX.out.bai).join(ARRIBA_ARRIBA.out.fusions)]
                input[1]  = [
                    [ id:'test_fasta_fai' ], // meta map
                    [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]]
                input[2] = []
                input[3] = []
                """
            }
        }

        then {

            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
